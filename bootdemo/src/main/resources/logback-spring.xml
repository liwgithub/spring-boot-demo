<?xml version="1.0" encoding="UTF-8" ?>

<configuration scan="true" scanPeriod="30 seconds" debug="false">

    <!--
    用来定义变量值的标签，<property> 有两个属性，name和value；
    其中name的值是变量的名称，value的值时变量定义的值。
    通过<property>定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量
    -->
    <property
        name="ENCODE_PATTERN"
        value="%d{yyyy-MM-dd HH:mm:ss.sss} %-5level [%thread] %c:%L:%n--->%msg%n"/>
    <!--
        appender用来格式化日志输出节点，
        有俩个属性name和class，class用来指定哪种输出策略，
        常用就是控制台输出策略和文件输出策略
    -->
    <!--控制台日志 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">

        <!--ThresholdFilter为系统定义的拦截器，
            例如我们用ThresholdFilter来过滤掉ERROR级别以下的日志。
            如果不用记得注释掉，不然你控制台会发现没日志~
        -->
       <!-- <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>-->

        <!--<encoder>表示对日志进行编码：
            1.%d{yyyy-MM-dd HH:mm:ss.sss} ——日志输出时间
            2.%-5level ——日志级别，并且使用5个字符靠左对齐
            3.%thread ——输出日志的进程名字，这在Web应用以及异步任务处理中很有用
            4.%c ——输出日志所属的类
            5.%L ——输出打印日志语句的行号
            6.%msg ——日志消息
            7.%n ——平台的换行符
        -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <Pattern>${ENCODE_PATTERN}</Pattern>
        </encoder>
    </appender>
    <!--文件日志-->
    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--
                <fileNamePattern>logs/output.%d{yyyy-MM-dd}.log</fileNamePattern>
                定义了日志的切分方式——把每一天的日志归档到一个文件中
                <maxHistory>7</maxHistory>表示只保留最近7天的日志，以防止日志填满整个磁盘空间
                <totalSizeCap>1GB</totalSizeCap>用来指定日志文件的上限大小，例如设置为1GB的话，那么到了这个值，就会删除旧的日志
            -->
            <fileNamePattern>
                logs/output.%d{yyyy-MM-dd}.log
            </fileNamePattern>
            <maxHistory>7</maxHistory>
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>

        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <Pattern>${ENCODE_PATTERN}</Pattern>
        </encoder>

    </appender>

    <!--root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
        不能设置为INHERITED或者同义词NULL，默认是DEBUG
        日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出
    -->
    <!--
        <root>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个loger
    -->
    <root level="info">
        <appender-ref ref="console"/>
        <appender-ref ref="file"/>
    </root>

    <!--
        <loger>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。
        <loger>仅有一个name属性,name:用来指定受此loger约束的某一个包或者具体的某一个类，
        一个可选的level ,用来设置打印级别，大小写无关
        一个可选的additivity属性 ,是否向上级loger传递打印信息。默认是true
      -->

    <!--
        <logger name="com.baiding.boot.controller" />将控制controller包下的所有类的日志的打印，
         但是并没用设置打印级别，所以继承他的上级<root>的日志级别“info”；
         没有设置addtivity，默认为true，将此loger的打印信息向上级传递；
         没有设置appender，此loger本身不打印任何信息。
         <root level="info">将root的打印级别设置为“info”，指定了名字为“console”,"file"的appender
         当执行com.baiding.controller.TemplateController类的test方法时
         所以首先执行<logger name="com.baiding.boot.controller"/>，将级别为“info”及大于“info”的日志信息传递给root，本身并不打印；

        root接到下级传递的信息，交给已经配置好的名为“console”的appender处理，“console”appender将信息打印到控制台；
        但注意名为“console”的appender 过滤掉ERROR级别以下的日志。
        所以控制台只得到
        2017-07-20 17:34:09.009 ERROR [http-nio-8080-exec-4]
        com.baiding.boot.controller.TemplateController:35: - - -》日志输出 error

        只有在文件日志中才能得到info,warn,error级别的所有的日志

    -->
    <logger name="com.baiding.boot.controller"/>
    <logger name="org.springframework" level="error" additivity="false">
        <appender-ref ref="console"/>
    </logger>
    <logger name="org.apache" level="error" additivity="false">
        <appender-ref ref="console"/>
    </logger>


    <!--
        控制com.baiding.boot.controller.LogController类的日志打印，打印级别为“WARN”
        additivity属性为false，表示此loger的打印信息不再向上级传递
        指定了名字为“console”,“file”的appender

        这时候执行com.baiding.boot.controller.LogController类的test方法时，
        先执行<logger name="com.baiding.boot.controller.LogController" level="warn" additivity="false">,
        将级别为“WARN”及大于“WARN”的日志信息交给此loger指定的名为“console”的appender处理，
        在控制台中打出日志，不再向上级root传递打印信息。

        当然如果你把additivity="false"改成additivity="true"的话，就会打印两次，
        因为打印信息向上级传递，logger本身打印一次，root接到后又打印一次。
    -->
    <logger name="com.baiding.boot.controller.LogController"
        level="warn" additivity="false">
        <appender-ref ref="console"/>
        <appender-ref ref="file"/>
    </logger>
    <!--

    -->
</configuration>